
@title{Mousetrack}
@author{teenylasers}

@contents{}



#######################################################################
#######################################################################



@section{General Bayesian Estimation}

Define
@m{\beta_k(s_k)} is the belief function, where we believe the state @m{s} is likely to be at time @m{k}. @m{P(m, s)} is the joint probability density of getting a measurement @m{m} given the state @m{s}. @m{P(s_k, s_{k-1})} is the joint probability density of finding state @m{s_k} at time @m{k} given @m{s_{k-1}}.

@M{
\beta_k(s_k) &= P_k(m_k, s_k)\int{\beta_{k-1}(s_{k-1})P_k(s_k, s_{i-1}) ds_{k-1}} \nonumber \\
   &= P_k(m_k, s_k) \beta_{k|k-1}(s_k) \label{eq:general_bayes}
}

In recursive implementation, @m{\beta_{k|k-1}} predicts the believe function based on the previous belief function @m{\beta_{k-1}(s_{k-1})} and the state evolution model @m{P{s_k, s_{k-1}}}. It is then adjusted using the measurement model @m{P(m_k, s_k)} to arrive at the latest belief function @m{\beta_k(s_k)}.



#######################################################################
#######################################################################



@section{Kalman Filter}


#######################################################################


@subsection{Derivation from general Bayesian estimation}

The belief function @m{\beta} describes the probability distribution of where @m{s_k} is in the state coordinates. For computational convenience, we model @m{\beta}, @m{P_k(m_k, s_k)}, and @m{P_k(s_k, s_{k-1})} each as a multivariate Gaussian.
@M{
P_k(s_k, s_{k-1}) &= \mathcal{N}(As_{k-1}, Q, s_k) \nonumber \\
P_k(m_k, s_k) &= \mathcal{N}(Cs_k, R, m_k) \nonumber \\
\beta(s_k) &= \mathcal{N}(\mu_k, \Sigma_k, s_k)
}


#######################################################################


@subsection{The model}

Apply Kalman Filter for a single track. For long-range autonomous driving tracking problems, we can assume a 2D tracking space, where there is no need for z or elevation information.

The state is modeled by
@M{s_{k+1} = As_k + w_k + d_{k+1|k}}
where @m{w_k} represents the process noise, estimated by a Gaussian @m{\mathcal{N}(0, Q)}, and @m{d_{k+1|k}} denotes a deterministic input such as relative position change due to own-ship motion.

Measurements are modeled by
@M{m_k = Cs_k + v_k}
where @m{v_k} is the measurement noise, estimated by a Gaussian @m{\mathcal{N}(0, R)}.

We want to estimate the belief function of @m{s}, @m{\beta(s_k) = \mathcal{N}(\mu_k, \Sigma_k, s_k)}

From the previous belief function @m{\beta(s_{k-1})}, we expect the unfiltered estimation of the current state is described by
@M{\hat{\mu}_{k|k-1} = A\mu_{k-1}}
@M{\hat{\Sigma}_{k|k-1} = A\Sigma_{k-1}A^T + Q}
The Kalman gain is
@M{\label{eq:kf_gain} K_k = \hat{\Sigma}_{k|k-1}C^T[C\hat{\Sigma}_{k|k-1}C^T + R]^{-1}}

The filtered state is
@M{\mu_{k|k} = \hat{\mu}_{k|k-1} + K_k\tilde{m}_k}
@M{\label{eq:kf_cov} \Sigma(k|k) = [\mathcal{I} - K_kC] \hat{\Sigma}_{k|k-1}}
where @m{\tilde{m} = m(k) - C\hat{\mu}_{k|k-1}} is the unfiltered measurement residual, i.e. the innovation, and its covariance is @m{S_k = C\hat{\Sigma}_{k|k-1}C^T + R}.

Finally, future state predictions are given by
@M{\mu_{k+1|k} = A\mu_{k|k}}
@M{\Sigma_{k+1|k} = A\Sigma_{k|k}A^T + Q}


#######################################################################


@subsection{Implementations}


@subsection{@label{kalman_model1} Model 1. Nonlinear measurement matrix @m{C}, Taylor expansion for measurement noise covariance @m{R}}

Radar measurements are in polar coordinates. We choose to track in cartesian coordinates for a more intuitive model of target motion. For a radar scan interval of time @m{T}, target motions are simply
@M{
x_{k+1} = x_k + T\dot{x}_k + \frac{T^2}{2}\ddot{x}_k \nonumber \\
y_{k+1} = y_k + T\dot{y}_k + \frac{T^2}{2}\ddot{y}_k \label{eq:kinetics}
}

The state update model is
@M{ \label{eq:const_v_process}
s = \begin{bmatrix} x \\ \dot{x} \\ y \\ \dot{y} \end{bmatrix},\quad
A = \begin{bmatrix} 1 & T & 0 & 0 \\
                    0 & 1 & 0 & 0 \\
		    0 & 0 & 1 & T \\
		    0 & 0 & 0 & 1 \end{bmatrix}
}

The measurement model that bridges polar to cartesian coordinates is
@M{
m_k &= Cs_k \nonumber \\
\begin{bmatrix} x \\ y \\ r\dot{r} \end{bmatrix} = \begin{bmatrix} -r \sin(\theta) \\ r \cos(\theta) \\ r\dot{r} \end{bmatrix} &=
\begin{bmatrix} 1 & 0 & 0 & 0 \\
		0 & 0 & 1 & 0 \\
		\dot{x} & x & \dot{y} & y
\end{bmatrix}
\begin{bmatrix} x \\ \dot{x} \\ y \\ \dot{y} \end{bmatrix}
}
@b{TODO}: the form of @m{m = Cs} comes from [Radar Data Processing by Farina and Studer, Section 4.6], derive, and alternative treatments, e.g. EKF or UKF?

Notes:
@list{
@* Acceleration is not included in the state model for now.
}


#######################################################################


@subsubsection{Process covariance}

Process noise may include white noise from e.g. the RF mixer, correlated noise e.g. angular scintillation, and as a way to treat target acceleration or maneuvering using the Singer model. For now, we use the Singer model for slowly maneuvering targets, that is, sampling time @m{T \ll \tau_m} the maneuver time constant. The resulting covariance is stated here without derivation, adapted from [Blackman book, Page 33].

@b{TODO}: derive, model other noise

@M{
Q = \frac{2\sigma^2_m}{\tau_m}
\begin{bmatrix}
\frac{T^5}{20} & \frac{T^4}{8} & 0 & 0 \\
\frac{T^4}{8} & \frac{T^3}{3} & 0 & 0 \\
0 & 0 & \frac{T^5}{20} & \frac{T^4}{8} \\
0 & 0 & \frac{T^4}{8} & \frac{T^3}{3}
\end{bmatrix}
}


#######################################################################


@subsubsection{Coordinate transform for measurement covariance}

Radar measurements typically consists of @m{\{r, \dot{r}, \theta\}} with variances @m{\{\sigma^2_r, \sigma^2_{\dot{r}}, \sigma^2_\theta\}}. We wish to calculate the covariance of the measurement noise @m{\mathcal{N}(0, R)}, where
@M{R =
\begin{bmatrix}
\sigma^2_{xx} & \sigma^2_{xy} & \sigma^2_{xr\dot{r}} \\
\sigma^2_{xy} &  \sigma^2_{yy} & \sigma^2_{yr\dot{r}} \\
\sigma^2_{xr\dot{r}} & \sigma^2_{yr\dot{r}} & \sigma^2_{r\dot{r}r\dot{r}}
\end{bmatrix}}
is a function of the raw radar measurements' variances.

Consider a general transformation of a random variable @m{\mathbf{x}}, with mean @m{\bar{\mathbf{x}}} and covariance @m{\mathbf{\Sigma_x}}, to a new random variable @m{\mathbf{y}} by the nonlinear function @m{f}
@M{\mathbf{y} = f(\mathbf{x})}
We apply Taylor expansion around @m{\bar{\mathbf{x}}}, using subscript-summation notation,
@M{
f_i(\mathbf{x}) &= f_i(\bar{\mathbf{x}}) + \frac{\partial f_i}{\partial x_j}(x_j-\bar{x}_j) + \frac{1}{2}\frac{\partial^2f_i}{\partial x_j \partial x_k}(x_j - \bar{x}_j)(x_k - \bar{x}_k) \nonumber \\
&= f_i(\bar{\mathbf{x}}) + \mathbf{J}_i(\mathbf{x} - \bar{\mathbf{x}}) + \frac{1}{2}(\mathbf{x} - \bar{\mathbf{x}})^T\mathbf{H}_i(\mathbf{x} - \bar{\mathbf{x}})
}
where @m{\mathbf{J}_i} is the i-th row of the Jacobian matrix, and @m{\mathbf{H}_i} is the i-th plane of the 3-dimensional Hessian tensor.
Assume that @m{(\mathbf{x} - \bar{\mathbf{x}})} is zero-mean with covariance @m{\mathbf{\Sigma_x}}, take the expectation value to get @m{\bar{\mathbf{y}}} and @m{\mathbf{\Sigma_y}}
@M{
\bar{\mathbf{y}} = E(\mathbf{y}) &= E(f(\bar{\mathbf{x}})) + \mathbf{J} E(\mathbf{x} - \bar{\mathbf{x}}) + \frac{1}{2}E((\mathbf{x} - \bar{\mathbf{x}})^T\mathbf{H}(\mathbf{x} - \bar{\mathbf{x}})) \nonumber \\
&= f(\bar{\mathbf{x}}) + \frac{1}{2}E((\mathbf{x} - \bar{\mathbf{x}})^T\mathbf{H}(\mathbf{x} - \bar{\mathbf{x}})) \nonumber \\
&\approx f(\bar{\mathbf{x}})
}
@M{
\mathbf{\Sigma_y} = E((\mathbf{y} - \bar{\mathbf{y}})(\mathbf{y} - \bar{\mathbf{y}})^T) &= \mathbf{J}E((\mathbf{x} - \bar{\mathbf{x}})(\mathbf{x} - \bar{\mathbf{x}})^T)\mathbf{J}^T \nonumber \\
&= \mathbf{J}\mathbf{\Sigma_x}\mathbf{J}^T \label{eq:y_var}
}

Apply @eqref{y_var} to the measurement model, we have @m{\mathbf{x} = \{r, \theta, \dot{r}\}}, @m{f(\mathbf{x}) = \{-r\sin\theta, r\cos\theta, r\dot{r}\}}, assume the variances of @m{\{r, \dot{r}, \theta\}} are not correlated,
# @M{
# R &= \mathbf{J}
# \begin{bmatrix}
# \sigma^2_r & 0 & 0 \\
# 0 & \sigma^2_\theta & 0 \\
# 0 & 0 & \sigma^2_\dot{r}
# \end{bmatrix} \mathbf{J}^T \nonumber \\
# &= \begin{bmatrix}
# \sigma^2_r\cos^2\theta + r^2\sigma^2_\theta\sin^2\theta & \cos\theta\sin\theta(\sigma^2_r - r^2\sigma^2_\theta) & \dot{r}\sigma^2_r\cos\theta \\
# \cos\theta\sin\theta(\sigma^2_r - r^2\sigma^2_\theta) & r^2\sigma^2_\theta\cos^2\theta + \sigma^2_r\sin^2\theta & \dot{r}\sigma^2_r\sin\theta \\
# \dot{r}\sigma^2_r\cos\theta & \dot{r}\sigma^2_r\sin\theta & \dot{r}^2\sigma^2_r + r^2\sigma^2_\dot{r}
# \end{bmatrix}
# }
@M{
R &= \mathbf{J}
\begin{bmatrix}
\sigma^2_r & 0 & 0 \\
0 & \sigma^2_\theta & 0 \\
0 & 0 & \sigma^2_\dot{r}
\end{bmatrix} \mathbf{J}^T \nonumber \\
&= \begin{bmatrix}
\sigma^2_r\sin^2\theta + r^2\sigma^2_\theta\cos^2\theta & \cos\theta\sin\theta(\sigma^2_r - r^2\sigma^2_\theta) & -\dot{r}\sigma^2_r\sin\theta \\
\cos\theta\sin\theta(\sigma^2_r - r^2\sigma^2_\theta) & r^2\sigma^2_\theta\sin^2\theta + \sigma^2_r\cos^2\theta & \dot{r}\sigma^2_r\cos\theta \\
-\dot{r}\sigma^2_r\sin\theta & \dot{r}\sigma^2_r\cos\theta & \dot{r}^2\sigma^2_r + r^2\sigma^2_\dot{r}
\end{bmatrix}
}


#######################################################################


@subsection{@label{kalman_model2} Model 2. Nonlinear measurement model @m{m = c(s)}, extended Kalman filter for belief covariance update @m{C\hat{\Sigma}C^T}}

The process model is unchanged from @link{model1}{Model 1} above, described by @eqref{kinetics} and @eqref{const_v_process}. The measurement vector is the radar's direct measurement,
@M{m_k &= c(s_k) \nonumber \\
\begin{bmatrix}r \\ \theta \\ \dot{r}\end{bmatrix} &=
\begin{bmatrix}
\sqrt{x^2 + y^2} \\
\arctan{(-x/y)} \\
-\dot{x}\sin{\theta} + \dot{y}\cos{\theta}
\end{bmatrix} \label{eq:c_fxn}}
The measurement noise covariance is
@M{
R = \begin{bmatrix}
\sigma^2_r & 0 & 0 \\
0 & \sigma^2_\theta & 0
\\ 0 & 0 & \sigma^2_\dot{r}
\end{bmatrix}}

Because we no longer have a matrix @m{C} to transform the state vector @m{s} to the measurement @m{m}, calculations of the Kalman gain @eqref{kf_gain} and the belief function covariance @eqref{kf_cov} is now given by
@M{K_k = \hat{\Sigma}_{k|k-1}\mathbf{J}_c^T[\mathbf{J}_c\hat{\Sigma}_{k|k-1}\mathbf{J}_c^T + R]^{-1}}
@M{\Sigma(k|k) = [\mathcal{I} - K_k\mathbf{J}_c] \hat{\Sigma}_{k|k-1}}
where
@M{
\mathbf{J}_c &= \frac{\partial c(s)}{\partial s} \nonumber \\
 &= \begin{bmatrix}
 \frac{x}{\sqrt{x^2+y^2}} & 0 & \frac{y}{\sqrt{x^2+y^2}} & 0 \\
 -\frac{1}{(1+\frac{x^2}{y^2})y} & 0 & \frac{x}{(1+\frac{x^2}{y^2})y^2} & 0 \\
 -\frac{x^2\dot{x}}{(1+\frac{x^3}{y^2})^{3/2}y^3} + \frac{\dot{x}}{\sqrt{1+\frac{x^2}{y^2}}y} - \frac{x\dot{y}}{(1+\frac{x^3}{y^2})^{3/2}y^2} &
 \frac{x}{\sqrt{1+\frac{x^2}{y^2}}y} &
 \frac{x^3\dot{x}}{(1+\frac{x^3}{y^2})^{3/2}y^4}-\frac{x^2\dot{x}}{(1+\frac{x^3}{y^2})^{3/2}y^3}+\frac{x^2\dot{y}}{(1+\frac{x^3}{y^2})^{3/2}y^3} &
 \frac{1}{\sqrt{1+\frac{x^2}{y^2}}} \label{eq:ekf_jc}
\end{bmatrix}
}


#######################################################################


@subsection{@label{kalman_model3} Model 3. Extended Kalman filter with constant acceleration kinematic model}

We augment @link{kalman_model2}{Model 2} above to include acceleration in the state, that is,
@M{
s = \begin{bmatrix} x \\ \dot{x} \\ \ddot{x} \\ y \\ \dot{y} \\ \ddot{y} \end{bmatrix},
A = \begin{bmatrix}
    1 & T & \frac{T^2}{2} & 0 & 0 & 0 \\
    0 & 1 & T & 0 & 0 & 0 \\
    0 & 0 & 1 & 0 & 0 & 0 \\
    0 & 0 & 0 & 1 & T & \frac{T^2}{2} \\
    0 & 0 & 0 & 0 & 1 & T \\
    0 & 0 & 0 & 0 & 0 & 1
    \end{bmatrix}
}
The measurement model is still described by @eqref{c_fxn}; however, the Jacobian linearization now becomes
@M{
\mathbf{J}_c = \begin{bmatrix}
 \frac{x}{\sqrt{x^2+y^2}} & 0 & 0 & \frac{y}{\sqrt{x^2+y^2}} & 0 & 0 \\
 -\frac{1}{(1+\frac{x^2}{y^2})y} & 0 & 0 & \frac{x}{(1+\frac{x^2}{y^2})y^2} & 0 & 0 \\
 -\frac{x^2\dot{x}}{(1+\frac{x^3}{y^2})^{3/2}y^3} + \frac{\dot{x}}{\sqrt{1+\frac{x^2}{y^2}}y} - \frac{x\dot{y}}{(1+\frac{x^3}{y^2})^{3/2}y^2} &
 \frac{x}{\sqrt{1+\frac{x^2}{y^2}}y} & 0 &
 \frac{x^3\dot{x}}{(1+\frac{x^3}{y^2})^{3/2}y^4}-\frac{x^2\dot{x}}{(1+\frac{x^3}{y^2})^{3/2}y^3}+\frac{x^2\dot{y}}{(1+\frac{x^3}{y^2})^{3/2}y^3} &
 \frac{1}{\sqrt{1+\frac{x^2}{y^2}}} & 0
\end{bmatrix}
}


#######################################################################


@subsection{Implementation results and to-do's}

@numlist{
@*	With @link{kalman_model1}{Model 1}, velocity estimation is consistently poor or slow to catch up with ground truth. Either tune covariance matrices, or implement extended Kalman filter to see whether the measurement model is the root cause.
@*	How to evaluate and compare models or filters?
@*	With @link{kalman_model3}{Model 3}, the filter is unstable, seemingly because acceleration estimates swing wildly for a few time periods before it converges, by which time position estimation may have become irrecoverably wrong. Is the solution a better tuned covariance @m{Q} or to relate acceleration with measurement, i.e. modify @eqref{c_fxn}.
@*	Visualize covariance, start with point cloud of @m{\{r, \theta, \dot{r}\}} using @m{\{\sigma_r, \sigma_\theta, \sigma_\dot{r}\}}, coordinate transform to @m{\{x, y, r\dot{r}\}} or @m{\{x, \dot{x}, \ddot{x}, y, \dot{y}, \ddot{y}\}}.
}



#######################################################################
#######################################################################



@section{Probabilistic Hypothesis Density (PHD) Filter}


#######################################################################


@subsection{Derivation from general Bayesian estimation}

Following from the general Bayesian estimator @eqref{general_bayes},

@b{Prediction}

@M{ \label{eq:phd_predict}
\beta_{k|k-1}(s_k) = b(s_k) + \int P(s_k, s_{k-1})P_s\beta_{k-1}(s_{k-1}) ds_{k-1}
}
where @m{P(s_k, s_{k-1})} is the probability density of a transition from @m{s_{k-1}} to @m{s_k}, @m{P_s} is the target survival probability at time @m{k} given its previous state @m{s_{k-1}}, @m{b(s_k)} is the target birth probability. In contrast to the Kalman filter representation, @m{s} encapsulates all targets in the observation space. Note, in many papers, the model contains an additional term for the probability of targets being spawn at time @m{k}, we will not consider new targets spawning from existing targets to be different from general target births.

@b{Update}
@M{ \label{eq:phd_update}
\beta_{k|k}(s_k) &= \beta_{k|k-1}(s_k) \left[ (1 - P_d) + \sum_{j=1}^M \frac{P_d P(m_j, s_k)}{\kappa(m_j)\mu_{FA} + \int P_d P(m_j, s_k)\beta_{k|k-1}(s_k) ds_k} \right]
}
where @m{P_d} is the probability of detection, @m{M} is the number of measurements, @m{j} is the index that keeps track of all @m{M} measurements, @m{P(m_j, s_k)} is the @emph{likelihood}, i.e. the joint probability density of getting the @m{j}-th measurement given state @m{s_k}, @m{\kappa(m_s)} is the clutter model, the probability distribution of clutter points over the observation space, @m{\mu_{FA}} is the Poisson false alarm rate.


#######################################################################


@subsection{Implement using Gaussian mixture model}

So far, we have made no assumption about the form the various probability functions take. To enable a closed-form model, we use the Gaussian mixture model:

@M{P(s_k, s_{k-1}) &= \mathcal{N}(As_{k-1}, Q, s_k) \nonumber \\
P(m_k, s_k) &= \mathcal{N}(Cs_k, R, m_k) \nonumber \\
b(s_k) &= \sum_{i=1}^{J_b} w_{b,i}\mathcal{N}(\mu_b, \Sigma_b, s_k)
}

The form of @m{b_k} is a generic weighted gaussian mixture. We also assume that @m{P_s} and @m{P_d} are both constant over time.

Since all input functions to the estimation of belief functions @m{\beta} are gaussians or mixture of gaussians, @m{\beta} also takes on the form of a mixture of gaussians,
@M{
\beta_k(s_k) = \sum_{i=1}^{J_\beta}w_{\beta,i}\mathcal{N}(\mu_{k,i}, \Sigma_{k,i}, s_k)
}

Use the following identities and rules for Gaussian multiplication and integration
@M{\label{eq:gaussian_swap_variables}
\mathcal{N}(As+b, Q, x) = |A|\mathcal{N}(A^{-1}(x-b),A^{-1}RA^{-T},s)
}
@M{
\mathcal{N}(\mu_1, \Sigma_1, x)\mathcal{N}(\mu_2, \Sigma_2, x) = \mathcal{N}(\mu_1, \Sigma_1+\Sigma_2, \mu_2) \mathcal{N}((\Sigma_1^{-1}+\Sigma_2^{-1})^{-1}(\Sigma_1^{-1}\mu_1 + \Sigma_2^{-1}\mu_2), (\Sigma_1^{-1}+\Sigma_2^{-1})^{-1}, x)
}
@M{ \label{eq:mat_inverse_rule}
(A^{-1} + B^{-1})^{-1} = A(A+B)^{-1}B = (I-B(A+B)^{-1})B
}
@M{ \label{eq:mat_integral_rule}
\int \mathcal{N}(Ax, Q, y)\mathcal{N}(\mu, \Sigma, x) dx = \mathcal{N}(A\mu, Q + A\Sigma A^T, y)
}

Then @eqref{phd_predict} becomes
@M{
\beta_{k|k-1}(s_k)
&= b(s_k) + P_s\int \mathcal{N}(As_{k-1}, Q, s_k) \sum_{i=1}^{J_\beta}w_{\beta,i}\mathcal{N}(\mu_{k-1,i}, \Sigma_{k-1,i}, s_{k-1}) ds_{k-1} \nonumber \\
&= b(s_k) + P_s\sum_{i=1}^{J_\beta} w_{\beta,i} \int \mathcal{N}(As_{k-1}, Q, s_k)\mathcal{N}(\mu_{k-1,i}, \Sigma_{k-1,i}, s_{k-1}) ds_{k-1} \nonumber \\
&= \sum_{i=1}^{J_b} w_{b,i}\mathcal{N}(\mu_b, \Sigma_b, s_k) + P_s \sum_{i=1}^{J_\beta} w_{\beta,i} \mathcal{N}(A\mu_{k-1,i}, Q + A\Sigma_{k-1,i}A^T, s_k)  \label{eq:phd_predict_gmm} \\
&= \sum_{i=1}^{J_{\beta,k|k-1}} w_{\beta,k|k-1,i} \mathcal{N}(\mu_{k|k-1,i}, \Sigma_{k|k-1,i}, s_k) \nonumber
}

and @eqref{phd_update} becomes
@M{
\beta_{k|k}(s_k)
&= (1-P_d)\beta_{k|k-1}(s_k) + P_d \sum_{j=1}^M
    \frac{\beta_{k|k-1}(s_k)\mathcal{N}(Cs_k, R, m_j)}
         {\kappa(m_j)\mu_{FA} + P_d\int \mathcal{N}(Cs_k, R, m_j)\beta_{k|k-1}(s_k) ds_k} \nonumber \\
&= (1-P_d)\beta_{k|k-1}(s_k) + P_d \sum_{j=1}^M
    \frac{\beta_{k|k-1}(s_k)\mathcal{N}(Cs_k, R, m_j)}
    	{\kappa(m_j)\mu_{FA} + P_d \sum_{i=1}^{J_{\beta,k|k-1}} w_{\beta,k|k-1,i} \mathcal{N}(C\mu_{k|k-1,i}, R+C\Sigma_{k|k-1,i}C^T, m_j)} \label{eq:phd_update_gmm}
}

We notice that @m{\mathcal{N}(Cs_k, R, m_j)} in the numerator expresses the probability density in measurement space instead of state space. One way to map to state space is to use @eqref{gaussian_swap_variables}, @m{\mathcal{N}(Cs_k, R, m_j) = |C|\mathcal{N}(C^{-1}m_j, C^{-1}TC^{-T}, s_k)}. However, @m{C} is often not a square matrix, measurement space usually has lower dimensions than state space. Therefore, we cannot meaningfully calculate and use @m{C^{-1}}. There are several ways to proceed:

@numlist{
@*	Eigen-decomposition @b{TODO}: how does it help?
@*	Use numerically large covariance in directions that ill-characterized by the measurements
@*	@eqref{phd_update_gmm} can be expressed as a weighted sum of Kalman filters. The form of Kalman filter side-steps the need to invert @m{C}.}


@b{TODO}: what does the inverse of a rectangular @m{C} really mean? What happens when measurement space has lower or higher dimensions than state space?


#######################################################################


@subsubsection{The Gaussian mixture PHD filter as a weighted sum of Kalman filters}
We can re-write @eqref{phd_update_gmm} as a sum of Kalman filter updates. We expand @m{\beta_{k|k-1}(s_k)}, and setting aside the target birth probability distribution @m{b(s_k)} for now, since it is usually handled as a separate target initiation step in Kalman filter implementations.
@M{
\beta_{k|k}(s_k)
&= (1-P_d)\beta_{k|k-1}(s_k) + P_d \sum_{j=1}^M
   \frac{\sum_{i=1}^{J_{\beta,k|k-1}} w_{\beta,k|k-1,i} \mathcal{N}(\mu_{k|k-1,i}, \Sigma_{k|k-1,i}, s_k) \mathcal{N}(Cs_k, R, m_j)}
	{\kappa(m_j)\mu_{FA} + P_d \sum_{i=1}^{J_{\beta,k|k-1}} w_{\beta,k|k-1,i} \mathcal{N}(C\mu_{k|k-1,i}, R+C\Sigma_{k|k-1,i}C^T, m_j) } \nonumber
}

First, we treat the gaussian multiplication in the numerator,
@M{
\mathcal{N}(Cs, R, m)\mathcal{N}(\hat{\mu}, \hat{\Sigma}, s)
&= |C|\mathcal{N}(C^{-1}m, C^{-1}RC^{-T}, s)\mathcal{N}(\hat{\mu}, \hat{\Sigma}, s) \nonumber \\
&= |C|\mathcal{N}(C^{-1}m, C^{-1}RC^{-T} + \hat{\Sigma}, \hat{\mu})
   \mathcal{N}\left (\left[(C^{-1}RC^{-T})^{-1} + \hat{\Sigma}^{-1}\right]^{-1} \left[ (C^{-1}RC^{-T})^{-1}C^{-1}m + \hat{\Sigma}^{-1}\hat{\mu} \right], \left[(C^{-1}RC^{-T})^{-1} + \hat{\Sigma}^{-1}\right]^{-1} , s \right) \label{eq:phd_update_numerator}
}
For the covariance of the second gaussian in @eqref{phd_update_numerator}, apply @eqref{mat_inverse_rule},
@M{
\Sigma
&= \left[(C^{-1}RC^{-T})^{-1} + \hat{\Sigma}^{-1}\right]^{-1} \nonumber \\
&= \left[ I - \hat{\Sigma}(C^{-1}RC^{-T} + \hat{\Sigma})^{-1} \right] \hat{\Sigma} \nonumber \\
&= \left[ I - \hat{\Sigma}(C^{-1}(R+C\hat{\Sigma}C^T)C^-{T})^{-1} \right] \nonumber \hat{\Sigma} \\
&= \left[ I - \hat{\Sigma}C^T(R+C\hat{\Sigma}C^T)^{-1}C \right] \hat{\Sigma} \nonumber \\
&= (I-KC)\hat{\Sigma}
}
where @m{K} is the Kalman filter, given by
@M{K = \hat{\Sigma}C^T(R+C\hat{\Sigma}C^T)^{-1}}
For the mean of the second gaussian in @eqref{phd_update_numerator},
@M{
\mu
&= \Sigma\left[ (C^{-1}RC^{-T})C^{-1}m + \hat{\Sigma}^{-1}\hat{\mu} \right] \nonumber \\
&= \Sigma(C^TRm - \hat{\Sigma}^{-1}\hat{\mu}) = \hat{\mu} + K(m - C\hat{\mu})
}
Simplifying the first gaussian, @eqref{phd_update_numerator} becomes
@M{
\mathcal{N}(Cs_k, R, m_j)\mathcal{N}(\mu_{k|k-1,i}, \Sigma_{k|k-1,i}, s)
&= \mathcal{N}(C\mu_{k|k-1,i}, R+C\Sigma_{k|k-1,i}C^T, m_j)\mathcal{N}(\mu_{k|k-1,i} + K(m_j - C\mu_{k|k-1,i}), (I-KC)\Sigma_{k|k-1,i}, s)
}

Putting it all together,
@M{
\beta_{k|k}(s_k)
&=(1-P_d)\beta_{k|k-1}(s_k) + P_d \sum_{j=1}^M
   \frac{\sum_{i=1}^{J_{\beta,k|k-1}} w_{\beta,k|k-1,i} \mathcal{N}(C\mu_{k|k-1,i}, R+C\Sigma_{k|k-1,i}C^T, m_j)\mathcal{N}(\mu_{k|k-1,i} + K(m_j - C\mu_{k|k-1,i}), (I-KC)\Sigma_{k|k-1,i}, s_k)}
   	{\kappa(m_j)\mu_{FA} + P_d \sum_{i=1}^{J_{\beta,k|k-1}} w_{\beta,k|k-1,i} \mathcal{N}(C\mu_{k|k-1,i}, R+C\Sigma_{k|k-1,i}C^T, m_j)}}



#######################################################################


@subsubsection{Model 1. EKF-style measurement model, @m{P_s = 1}, @m{P_d = 1}, @m{\mu_{FA} = 0}}
To start, we assume the probability of target survival and the probability of detection are both 1. For further simplification to test the model, we set false alarm distribution to 0. We follow the models used in extended Kalman filters. The process model is given by @eqref{const_v_process}; the measurement model is @eqref{c_fxn}. The prediction and update equations become
@M{ \label{eq:phd_gmm1_predict}
\beta_{k|k-1}(s_k) = b(s_k)  + \sum_{i=1}^{J_{\beta, k-1}} w_{\beta,k-1,i} \mathcal{N}(A\mu_{k-1,i}, Q + A\Sigma_{k-1,i}A^T, s_k)
}
@M{ \label{eq:phd_gmm1_update}
\beta_{k|k}(s_k)
= \frac{\sum_{j=1}^M \sum_{i=1}^{J_{\beta, k-1}} w_{\beta,k|k-1,i} \mathcal{N}(C\mu_{k|k-1,i}, R+C\Sigma_{k|k-1,i}C^T, m_j)\mathcal{N}(\mu_{k|k-1,i} + K(m_j - C\mu_{k|k-1,i}), (I-KC)\Sigma_{k|k-1,i}, s_k)}
   	{\sum_{j=1}^M \sum_{i=1}^{J_{\beta,k|k-1}} w_{\beta,k|k-1,i} \mathcal{N}(c({\mu_{k|k-1,i}}), \mathbf{J}_c \Sigma_{k|k-1,i} \mathbf{J}_c^T + R, m_j)}
}
where @m{\mathbf{J}_c} is given by @eqref{ekf_jc}.


We make no assumption on where new targets are more likely to pop up, so we apply a constant target birth probability to measurements that suggest the possibility of a new target, @m{b(s_k) = const}.

@b{TODO:}
@numlist{
@*	In @eqref{phd_gmm1_update}, the denominator gaussian's covariance is the residual covariance. Why?
@*
}


#######################################################################


@subsubsection{Model 2. Reinstate clutter and false alarm, @m{\kappa(m_j)} and @m{\mu_{FA}}}

@M{
\beta_{k|k}(s_k) = \frac{\sum_{j=1}^M \beta_{k|k-1}(s_k)\mathcal{N}(c(s_k), R, m_j)}
    	{\sum_{j=1}^M\kappa(m_j)\mu_{FA} + \sum_{j=1}^M \sum_{i=1}^{J_{\beta,k|k-1}} w_{\beta,k|k-1,i} \mathcal{N}(c(\mu_{k|k-1,i}), \mathbf{J}_c \Sigma_{k|k-1,i} \mathbf{J}_c^T + R, m_j)}
}
